/*
 * generated by Xtext
 */
package de.uni_marburg.splittr.description.formatting

import de.uni_marburg.splittr.description.services.SplittingDescriptionGrammarAccess
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class SplittingDescriptionFormatter extends AbstractDeclarativeFormatter {

	//	@Inject extension SplittingDescriptionGrammarAccess
	override protected void configureFormatting(FormattingConfig c) {
		val f = (getGrammarAccess as SplittingDescriptionGrammarAccess)
		for (Keyword into : f.findKeywords("into"))
			c.setLinewrap(2).after(into)
		for (Keyword key : f.findKeywords("fine-tune", "weight of generalization", "weight of aggregation",
			"weight of association", "weight of containment", "weight of interface realization",
			"weight of enum instantiation", "alpha = "))
			c.setLinewrap(1).before(key)
		c.setLinewrap(2).after(f.getSubModelRule())

	// It's usually a good idea to activate the following three statements.
	// They will add and preserve newlines around comments
	//		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
	//		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
	//		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
	}
}
